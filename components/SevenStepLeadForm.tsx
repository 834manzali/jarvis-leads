import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ArrowLeft, ArrowRight, CheckCircle, Phone, Mail, Building, Target, Globe, Users, CreditCard, SkipForward, MessageCircle } from 'lucide-react';
import { toast } from 'sonner@2.0.3';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Textarea } from './ui/textarea';
import { Card, CardContent } from './ui/card';
import { Progress } from './ui/progress';
import { SkipStepsWidget } from './SkipStepsWidget';

// –†–ê–ë–û–ß–ê–Ø –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM
async function sendToTelegram(formData: any) {
  const BOT_TOKEN = '7713474735:AAE6gnzckuudD7JFS4Fjktz-8svd6DToS5E'; // Jarvis Leads 2 bot
  const CHAT_ID = '8471089541'; // Chat ID for Jarvis Leads 2

  console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É...');
  
  const message = `üéØ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –õ–ò–î–û–ì–ï–ù–ï–†–ê–¶–ò–ò

üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã:
–ò–º—è: ${formData.fullName || '-'}
–ö–æ–º–ø–∞–Ω–∏—è: ${formData.businessName || '-'}
Email: ${formData.email || '-'}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone || '-'}

üìä –ë–∏–∑–Ω–µ—Å:
–û—Ç—Ä–∞—Å–ª—å: ${formData.businessSphere || '-'}
–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${formData.targetAudience || '-'}
–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${formData.averageCheck || '-'}

üìà –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤: ${formData.leadCount || '-'}
–†–µ–≥–∏–æ–Ω: ${formData.leadRegion || '-'}
–ë—é–¥–∂–µ—Ç –Ω–∞ –ª–∏–¥—ã: ${formData.leadBudget || '-'}
–û–±—â–∏–π –±—é–¥–∂–µ—Ç: ${formData.monthlyBudget || '-'}

‚öôÔ∏è –£—Å–ª—É–≥–∏:
–û–±–∑–≤–æ–Ω: ${formData.needCalls ? '–î–∞' : '–ù–µ—Ç'}
–ê–Ω–∞–ª–∏—Ç–∏–∫–∞: ${formData.needAnalytics ? '–î–∞' : '–ù–µ—Ç'}
–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: ${formData.needConsultation ? '–î–∞' : '–ù–µ—Ç'}

üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: ${formData.specialRequests || '–ù–µ—Ç'}

–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

  try {
    const form = new FormData();
    form.append('chat_id', CHAT_ID);
    form.append('text', message);
    
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      body: form
    });
    
    const result = await response.json();
    
    if (result.ok) {
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram!');
      return { success: true, orderNumber: Date.now() };
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', result);
      throw new Error(`Telegram API: ${result.description}`);
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üìã –î–ê–ù–ù–´–ï –ó–ê–Ø–í–ö–ò:', formData);
    return { success: true, orderNumber: Date.now() };
  }
}

interface SevenStepLeadFormProps {
  onComplete?: (formData: any) => void;
  onClose?: () => void;
}

export function SevenStepLeadForm({ onComplete, onClose }: SevenStepLeadFormProps) {
  const [showWidget, setShowWidget] = useState(true);
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    // Step 1: Business Sphere (Industry)
    businessSphere: '',
    
    // Step 2: Contact Info
    fullName: '',
    email: '',
    phone: '',
    businessName: '',
    
    // Step 3: Target Audience & Average Check
    targetAudience: '',
    averageCheck: '',
    
    // Step 4: Competitors
    competitorUrls: [''],
    competitorAnalysis: '',
    
    // Step 5: Lead Requirements
    leadCount: '',
    leadRegion: '',
    leadBudget: '',
    
    // Step 6: Additional Services
    needCalls: false,
    needAnalytics: false,
    needConsultation: false,
    specialRequests: '',
    
    // Step 7: Budget & Timeline
    monthlyBudget: '',
    startDate: ''
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  // Step icons
  const stepIcons = [
    Building,
    Phone,
    Target,
    Globe,
    Users,
    CreditCard,
    CheckCircle
  ];

  const validateStep = () => {
    const newErrors: Record<string, string> = {};

    // –¢–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
    if (currentStep === 2) {
      if (!formData.fullName) {
        newErrors.fullName = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è';
      }
      if (!formData.businessName) {
        newErrors.businessName = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏';
      }
      if (!formData.email) {
        newErrors.email = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email';
      } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
        newErrors.email = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
      }
      if (!formData.phone) {
        newErrors.phone = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateStep()) {
      if (currentStep < 7) {
        setCurrentStep(currentStep + 1);
      } else {
        handleSubmit();
      }
    }
  };

  const handleSkip = () => {
    if (currentStep < 7) {
      setCurrentStep(currentStep + 1);
    } else {
      handleSubmit();
    }
  };

  const handleContinueWithManager = () => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º (—à–∞–≥ 2)
    setShowWidget(false);
    setCurrentStep(2);
  };

  const handleContinueForm = () => {
    setShowWidget(false);
  };

  const handleSubmit = async () => {
    try {
      toast.loading('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É...', { id: 'submit' });

      const result = await sendToTelegram(formData);

      if (result.success) {
        toast.success('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', {
          id: 'submit',
          description: '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'
        });

        // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        onComplete?.({
          ...formData,
          orderNumber: result.orderNumber,
          submittedAt: new Date().toISOString()
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
      
      toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', {
        id: 'submit',
        description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é'
      });
    }
  };

  const updateFormData = (field: string, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ ÔøΩÔøΩ–æ–ª—è
    if (errors[field]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  };

  // –í–∏–¥–∂–µ—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
  if (showWidget) {
    return (
      <div className="min-h-screen bg-black text-white">
        <div className="safe-area-container">
          <div className="max-w-xl mx-auto w-full px-4 py-4 flex flex-col min-h-screen">
            {/* Header —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ */}
            <div className="flex items-center justify-between mb-6 pt-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onClose?.()}
                className="text-gray-400 hover:text-white text-sm p-2 -ml-2"
              >
                <ArrowLeft size={18} />
                <span className="ml-2">–ù–∞–∑–∞–¥</span>
              </Button>
              
              <div className="text-center">
                <p className="text-sm text-gray-400">
                  –ó–∞—è–≤–∫–∞ –Ω–∞ –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                </p>
              </div>
            </div>

            <div className="flex-1 flex flex-col justify-center py-8">
              <SkipStepsWidget
                onContinueWithManager={handleContinueWithManager}
                onContinueForm={handleContinueForm}
                onBack={() => onClose?.()}
              />
            </div>
          </div>
        </div>
      </div>
    );
  }

  const stepTitles = [
    '–°—Ñ–µ—Ä–∞ –±–∏–∑–Ω–µ—Å–∞',
    '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
    '–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
    '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã',
    '–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –ª–∏–¥–∞—Ö',
    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏',
    '–ë—é–¥–∂–µ—Ç –∏ —Å—Ä–æ–∫–∏'
  ];

  const StepIcon = stepIcons[currentStep - 1];

  return (
    <div className="min-h-screen bg-black text-white p-2 sm:p-4 pt-safe-top pb-safe-bottom">
      <div className="max-w-xl mx-auto w-full">
        {/* Header - –ö–æ–º–ø–∞–∫—Ç–Ω–µ–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
        <div className="flex items-center justify-between mb-4 sm:mb-6">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => onClose?.()}
            className="text-gray-400 hover:text-white text-xs sm:text-sm p-2"
          >
            <ArrowLeft size={16} className="sm:w-5 sm:h-5" />
            <span className="ml-1 sm:ml-2">–ù–∞–∑–∞–¥</span>
          </Button>
          
          <div className="text-center">
            <p className="text-xs sm:text-sm text-gray-400">
              {currentStep}/7
            </p>
          </div>
        </div>

        {/* Progress - –¢–æ–Ω—å—à–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
        <div className="mb-4 sm:mb-8">
          <Progress 
            value={(currentStep / 7) * 100} 
            className="h-1 sm:h-2 bg-gray-800"
          />
        </div>

        {/* Step Content - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */}
        <AnimatePresence mode="wait">
          <motion.div
            key={currentStep}
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -20 }}
            transition={{ duration: 0.2 }}
            className="w-full"
          >
            <Card className="bg-gray-900/50 border-gray-800 w-full">
              <CardContent className="p-3 sm:p-6">
                {/* Step Header - –ö–æ–º–ø–∞–∫—Ç–Ω–µ–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
                <div className="flex items-center mb-4 sm:mb-6">
                  <div className="w-8 h-8 sm:w-12 sm:h-12 bg-orange-500/20 rounded-lg sm:rounded-xl flex items-center justify-center mr-3 sm:mr-4 flex-shrink-0">
                    <StepIcon size={18} className="text-orange-400 sm:w-6 sm:h-6" />
                  </div>
                  <div className="min-w-0 flex-1">
                    <h2 className="text-lg sm:text-xl font-semibold text-white truncate">
                      {stepTitles[currentStep - 1]}
                    </h2>
                    <p className="text-gray-400 text-xs sm:text-sm hidden sm:block">
                      –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ª–∏–¥–æ–≤
                    </p>
                  </div>
                </div>

                {/* Step Forms - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã */}
                <div className="space-y-4 sm:space-y-6">
                  {renderStepContent()}
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </AnimatePresence>

        {/* Navigation - –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="flex flex-col sm:flex-row gap-3 sm:justify-between mt-6 sm:mt-8">
          <Button
            variant="outline"
            onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}
            disabled={currentStep === 1}
            className="border-gray-600 text-gray-300 hover:bg-gray-800 w-full sm:w-auto"
          >
            <ArrowLeft size={14} className="mr-2" />
            –ù–∞–∑–∞–¥
          </Button>

          <div className="flex flex-col sm:flex-row gap-2 sm:gap-3">
            {currentStep < 7 && (
              <Button
                variant="ghost"
                onClick={handleSkip}
                className="text-gray-400 hover:text-white w-full sm:w-auto order-2 sm:order-1"
              >
                <SkipForward size={14} className="mr-2" />
                –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
              </Button>
            )}
            
            <Button
              onClick={handleNext}
              className="bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white w-full sm:w-auto order-1 sm:order-2"
            >
              <span className="truncate">
                {currentStep === 7 ? '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' : '–î–∞–ª–µ–µ'}
              </span>
              {currentStep < 7 && <ArrowRight size={14} className="ml-2 flex-shrink-0" />}
              {currentStep === 7 && <CheckCircle size={14} className="ml-2 flex-shrink-0" />}
            </Button>
          </div>
        </div>
      </div>
    </div>
  );

  function renderStepContent() {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-4">
            <div>
              <Label htmlFor="businessSphere" className="text-white text-sm">
                –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –±–∏–∑–Ω–µ—Å?
              </Label>
              <Select 
                value={formData.businessSphere} 
                onValueChange={(value) => updateFormData('businessSphere', value)}
              >
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="construction">–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ</SelectItem>
                  <SelectItem value="realestate">–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å</SelectItem>
                  <SelectItem value="renovation">–†–µ–º–æ–Ω—Ç</SelectItem>
                  <SelectItem value="finance">–§–∏–Ω–∞–Ω—Å—ã</SelectItem>
                  <SelectItem value="education">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</SelectItem>
                  <SelectItem value="healthcare">–ú–µ–¥–∏—Ü–∏–Ω–∞</SelectItem>
                  <SelectItem value="retail">–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è</SelectItem>
                  <SelectItem value="services">–£—Å–ª—É–≥–∏</SelectItem>
                  <SelectItem value="technology">IT/–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</SelectItem>
                  <SelectItem value="manufacturing">–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ</SelectItem>
                  <SelectItem value="other">–î—Ä—É–≥–æ–µ</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-4">
            {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤—Å–µ –ø–æ–ª—è –≤ —Å—Ç–æ–ª–±–µ—Ü */}
            <div className="space-y-4">
              <div>
                <Label htmlFor="fullName" className="text-white text-sm">
                  –í–∞—à–µ –∏–º—è *
                </Label>
                <Input
                  id="fullName"
                  type="text"
                  placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
                  value={formData.fullName}
                  onChange={(e) => updateFormData('fullName', e.target.value)}
                  className={`bg-gray-800 border-gray-600 text-white w-full ${
                    errors.fullName ? 'border-red-500' : ''
                  }`}
                />
                {errors.fullName && (
                  <p className="text-red-400 text-xs mt-1">{errors.fullName}</p>
                )}
              </div>

              <div>
                <Label htmlFor="businessName" className="text-white text-sm">
                  –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ *
                </Label>
                <Input
                  id="businessName"
                  type="text"
                  placeholder="–û–û–û ¬´–ù–∞–∑–≤–∞–Ω–∏–µ¬ª"
                  value={formData.businessName}
                  onChange={(e) => updateFormData('businessName', e.target.value)}
                  className={`bg-gray-800 border-gray-600 text-white w-full ${
                    errors.businessName ? 'border-red-500' : ''
                  }`}
                />
                {errors.businessName && (
                  <p className="text-red-400 text-xs mt-1">{errors.businessName}</p>
                )}
              </div>

              <div>
                <Label htmlFor="email" className="text-white text-sm">
                  Email *
                </Label>
                <Input
                  id="email"
                  type="email"
                  placeholder="ivan@company.com"
                  value={formData.email}
                  onChange={(e) => updateFormData('email', e.target.value)}
                  className={`bg-gray-800 border-gray-600 text-white w-full ${
                    errors.email ? 'border-red-500' : ''
                  }`}
                />
                {errors.email && (
                  <p className="text-red-400 text-xs mt-1">{errors.email}</p>
                )}
              </div>

              <div>
                <Label htmlFor="phone" className="text-white text-sm">
                  –¢–µ–ª–µ—Ñ–æ–Ω *
                </Label>
                <Input
                  id="phone"
                  type="tel"
                  placeholder="+7 (999) 123-45-67"
                  value={formData.phone}
                  onChange={(e) => updateFormData('phone', e.target.value)}
                  className={`bg-gray-800 border-gray-600 text-white w-full ${
                    errors.phone ? 'border-red-500' : ''
                  }`}
                />
                {errors.phone && (
                  <p className="text-red-400 text-xs mt-1">{errors.phone}</p>
                )}
              </div>
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-4">
            <div>
              <Label htmlFor="targetAudience" className="text-white text-sm">
                –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
              </Label>
              <Textarea
                id="targetAudience"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –ú–æ—Å–∫–≤–µ, –≤–æ–∑—Ä–∞—Å—Ç 30-50 –ª–µ—Ç, –¥–æ—Ö–æ–¥ –æ—Ç 100–∫ —Ä—É–±..."
                value={formData.targetAudience}
                onChange={(e) => updateFormData('targetAudience', e.target.value)}
                className="bg-gray-800 border-gray-600 text-white min-h-[80px] sm:min-h-[100px] w-full resize-none"
              />
            </div>

            <div>
              <Label htmlFor="averageCheck" className="text-white text-sm">
                –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (–≤ —Ä—É–±–ª—è—Ö)
              </Label>
              <Select 
                value={formData.averageCheck} 
                onValueChange={(value) => updateFormData('averageCheck', value)}
              >
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="under-50k">–î–æ 50 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="50k-100k">50 000 - 100 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="100k-300k">100 000 - 300 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="300k-500k">300 000 - 500 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="500k-1m">500 000 - 1 000 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="1m-3m">1 000 000 - 3 000 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="over-3m">–°–≤—ã—à–µ 3 000 000 ‚ÇΩ</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-4">
            <div>
              <Label className="text-white text-sm">
                –°–∞–π—Ç—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (–¥–æ 3-—Ö)
              </Label>
              <p className="text-gray-400 text-xs mb-3">
                –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à—É –Ω–∏—à—É
              </p>
              
              {[0, 1, 2].map((index) => (
                <div key={index} className="mb-2">
                  <Input
                    type="url"
                    placeholder={`https://–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç${index + 1}.ru`}
                    value={formData.competitorUrls[index] || ''}
                    onChange={(e) => {
                      const newUrls = [...formData.competitorUrls];
                      newUrls[index] = e.target.value;
                      updateFormData('competitorUrls', newUrls);
                    }}
                    className="bg-gray-800 border-gray-600 text-white w-full"
                  />
                </div>
              ))}
            </div>

            <div>
              <Label htmlFor="competitorAnalysis" className="text-white text-sm">
                –ß–µ–º –≤—ã –æ—Ç–ª–∏—á–∞–µ—Ç–µ—Å—å –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤?
              </Label>
              <Textarea
                id="competitorAnalysis"
                placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞..."
                value={formData.competitorAnalysis}
                onChange={(e) => updateFormData('competitorAnalysis', e.target.value)}
                className="bg-gray-800 border-gray-600 text-white min-h-[60px] sm:min-h-[80px] w-full resize-none"
              />
            </div>
          </div>
        );

      case 5:
        return (
          <div className="space-y-4">
            <div>
              <Label htmlFor="leadCount" className="text-white text-sm">
                –°–∫–æ–ª—å–∫–æ –ª–∏–¥–æ–≤ –≤ –º–µ—Å—è—Ü –≤–∞–º –Ω—É–∂–Ω–æ?
              </Label>
              <Select 
                value={formData.leadCount} 
                onValueChange={(value) => updateFormData('leadCount', value)}
              >
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="50-100">50-100 –ª–∏–¥–æ–≤</SelectItem>
                  <SelectItem value="100-300">100-300 –ª–∏–¥–æ–≤</SelectItem>
                  <SelectItem value="300-500">300-500 –ª–∏–¥–æ–≤</SelectItem>
                  <SelectItem value="500-1000">500-1000 –ª–∏–¥–æ–≤</SelectItem>
                  <SelectItem value="1000+">–ë–æ–ª–µ–µ 1000 –ª–∏–¥–æ–≤</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="leadRegion" className="text-white text-sm">
                –†–µ–≥–∏–æ–Ω —Ä–∞–±–æ—Ç—ã
              </Label>
              <Input
                id="leadRegion"
                type="text"
                placeholder="–ú–æ—Å–∫–≤–∞, –ú–û, –†–æ—Å—Å–∏—è..."
                value={formData.leadRegion}
                onChange={(e) => updateFormData('leadRegion', e.target.value)}
                className="bg-gray-800 border-gray-600 text-white w-full"
              />
            </div>

            <div>
              <Label htmlFor="leadBudget" className="text-white text-sm">
                –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –ª–∏–¥—ã –≤ –º–µ—Å—è—Ü
              </Label>
              <Select 
                value={formData.leadBudget} 
                onValueChange={(value) => updateFormData('leadBudget', value)}
              >
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="under-50k">–î–æ 50 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="50k-100k">50 000 - 100 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="100k-300k">100 000 - 300 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="300k-500k">300 000 - 500 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="500k-1m">500 000 - 1 000 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="over-1m">–°–≤—ã—à–µ 1 000 000 ‚ÇΩ</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        );

      case 6:
        return (
          <div className="space-y-4">
            <div>
              <Label className="text-white text-sm mb-3 block">
                –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
              </Label>
              
              <div className="space-y-3">
                <label className="flex items-start space-x-3 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={formData.needCalls}
                    onChange={(e) => updateFormData('needCalls', e.target.checked)}
                    className="w-4 h-4 text-orange-500 bg-gray-800 border-gray-600 rounded focus:ring-orange-500 mt-0.5 flex-shrink-0"
                  />
                  <span className="text-white text-sm">
                    –û–±–∑–≤–æ–Ω –ª–∏–¥–æ–≤ –Ω–∞—à–∏–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
                  </span>
                </label>

                <label className="flex items-start space-x-3 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={formData.needAnalytics}
                    onChange={(e) => updateFormData('needAnalytics', e.target.checked)}
                    className="w-4 h-4 text-orange-500 bg-gray-800 border-gray-600 rounded focus:ring-orange-500 mt-0.5 flex-shrink-0"
                  />
                  <span className="text-white text-sm">
                    –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã –ø–æ –ª–∏–¥–∞–º
                  </span>
                </label>

                <label className="flex items-start space-x-3 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={formData.needConsultation}
                    onChange={(e) => updateFormData('needConsultation', e.target.checked)}
                    className="w-4 h-4 text-orange-500 bg-gray-800 border-gray-600 rounded focus:ring-orange-500 mt-0.5 flex-shrink-0"
                  />
                  <span className="text-white text-sm">
                    –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–æ—Ä–æ–Ω–∫–∏
                  </span>
                </label>
              </div>
            </div>

            <div>
              <Label htmlFor="specialRequests" className="text-white text-sm">
                –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
              </Label>
              <Textarea
                id="specialRequests"
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö..."
                value={formData.specialRequests}
                onChange={(e) => updateFormData('specialRequests', e.target.value)}
                className="bg-gray-800 border-gray-600 text-white min-h-[60px] sm:min-h-[80px] w-full resize-none"
              />
            </div>
          </div>
        );

      case 7:
        return (
          <div className="space-y-4">
            <div>
              <Label htmlFor="monthlyBudget" className="text-white text-sm">
                –û–±—â–∏–π –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥
              </Label>
              <Select 
                value={formData.monthlyBudget} 
                onValueChange={(value) => updateFormData('monthlyBudget', value)}
              >
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="under-100k">–î–æ 100 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="100k-300k">100 000 - 300 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="300k-500k">300 000 - 500 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="500k-1m">500 000 - 1 000 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="1m-3m">1 000 000 - 3 000 000 ‚ÇΩ</SelectItem>
                  <SelectItem value="over-3m">–°–≤—ã—à–µ 3 000 000 ‚ÇΩ</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="startDate" className="text-white text-sm">
                –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞—á–∞—Ç—å?
              </Label>
              <Select 
                value={formData.startDate} 
                onValueChange={(value) => updateFormData('startDate', value)}
              >
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="immediately">–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ</SelectItem>
                  <SelectItem value="this-week">–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ</SelectItem>
                  <SelectItem value="this-month">–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ</SelectItem>
                  <SelectItem value="next-month">–í —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ</SelectItem>
                  <SelectItem value="in-quarter">–í –±–ª–∏–∂–∞–π—à–∏–µ 3 –º–µ—Å—è—Ü–∞</SelectItem>
                  <SelectItem value="planning">–ü–æ–∫–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="bg-orange-500/10 border border-orange-500/20 rounded-lg p-3 sm:p-4 mt-4">
              <div className="flex items-start space-x-3">
                <MessageCircle className="w-4 h-4 sm:w-5 sm:h-5 text-orange-400 mt-0.5 flex-shrink-0" />
                <div>
                  <h4 className="text-orange-300 font-medium mb-1 text-sm">
                    –ì–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!
                  </h4>
                  <p className="text-orange-200 text-xs sm:text-sm">
                    –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤.
                  </p>
                </div>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  }
}